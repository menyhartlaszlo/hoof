x_ = c(x_,paste(x.var,collapse=","))
alpha_=c(alpha_,alpha)
lambda_ = c(lambda_,NA)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
}
}
eredm = data.frame(x=x_,lambda=lambda_,alpha=alpha_,r2=r2_,rmse=rmse_,mae=mae_,aic=aic_)
write.table(eredm,"clipboard",row.names = FALSE,sep = "\t",dec = ",")
x.var=c("C")
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", alpha = 0.5, fold_column="fold")
pred = h2o.predict(object=evapo.glm,newdata=df.hex)
plot(data_all$Ps,as.data.frame(pred)$predict,col=data_all$prec+1,xlab="Ps (measured)",ylab="Ps (predicted)")
abline(a=0,b=1)
plot(data_all$Ps,as.data.frame(pred)$predict,col=data_all$prec+1,xlab="Ps (measured)",ylab="Ps (predicted)")
plot(data_all$Ps,as.data.frame(pred)$predict,xlab="Ps (measured)",ylab="Ps (predicted)")
abline(a=0,b=1)
data_all <- readXL("E:/amunka/AndaA/A_kad/Adatok_parolgas_Rbe.xlsx",
rownames=FALSE, header=TRUE, na="", sheet="2014", stringsAsFactors=FALSE)
set.seed(1978)
cvf=cvFolds(nrow(data_all),K=6,type = "random")
data_all$fold=cvf$which[order(cvf$subsets[,1])]
# Dataframe átadása H2O-nak
df.hex = as.h2o(data_all[,2:ncol(data_all)],destination_frame = "df.hex")   # Remove Date variable for the sake of h2o
x.var=c("C","Ta", "Tmax","Tmin","RH","u")
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", alpha = 0.5, fold_column="fold")
pred1 = h2o.predict(object=evapo.glm,newdata=df.hex)
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
pred2 = h2o.predict(object=evapo.glm,newdata=df.hex)
plot(data_all$Ps,as.data.frame(pred1)$predict,xlab="Ps (measured)",ylab="Ps (predicted)")
xypoints(data_all$Ps,as.data.frame(pred2)$predict,col=2)
points(data_all$Ps,as.data.frame(pred2)$predict,col=2)
abline(a=0,b=1)
mean(abs(data_all$Ps-as.data.frame(pred1)$predict)
)
mean(abs(data_all$Ps-as.data.frame(pred2)$predict))
mean(abs(data_all$Ps-as.data.frame(pred1)$predict))
mean(abs(data_all$Ps-as.data.frame(pred2)$predict))
data_all <- readXL("E:/amunka/AndaA/A_kad/Adatok_parolgas_Rbe.xlsx",
rownames=FALSE, header=TRUE, na="", sheet="2014", stringsAsFactors=FALSE)
set.seed(1978)
cvf=cvFolds(nrow(data_all),K=6,type = "random")
data_all$fold=cvf$which[order(cvf$subsets[,1])]
# Dataframe átadása H2O-nak
df.hex = as.h2o(data_all[,2:ncol(data_all)],destination_frame = "df.hex")   # Remove Date variable for the sake of h2o
x.var=c("C","Ta", "Tmax","Tmin","RH","u")
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", alpha = 0.5, fold_column="fold")
pred.glm = h2o.predict(object=evapo.glm,newdata=df.hex)
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
pred.boosting = h2o.predict(object=evapo.glm,newdata=df.hex)
plot(data_all$Ps,as.data.frame(pred.glm)$predict,xlab="Ps (measured)",ylab="Ps (predicted)")
points(data_all$Ps,as.data.frame(pred.boosting)$predict,col=2)
abline(a=0,b=1)
mean(abs(data_all$Ps-as.data.frame(pred.glm)$predict))
mean(abs(data_all$Ps-as.data.frame(pred.boosting)$predict))
x_=c();alpha_=c();lambda_=c();r2_=c();rmse_=c();mae_=c();aic_=c()
x.vars = list(c("C","Ta", "Tmax","Tmin","RH","u"))
alphas = c(0,1,0.5)
for (x.var in x.vars) {
# Linear model without shrinkage (lambda=0)
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", lambda=0,fold_column="fold")
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,0)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
# RandomForest (lambda=-1)
evapo.glm = h2o.randomForest(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-1)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
# Boosting (lambda=-2)
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-2)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
for (alpha in alphas) {
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", alpha = alpha, fold_column="fold")
x_ = c(x_,paste(x.var,collapse=","))
alpha_=c(alpha_,alpha)
lambda_ = c(lambda_,NA)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
}
}
eredm = data.frame(x=x_,lambda=lambda_,alpha=alpha_,r2=r2_,rmse=rmse_,mae=mae_,aic=aic_)
write.table(eredm,"clipboard",row.names = FALSE,sep = "\t",dec = ",")
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
summary(evapo.glm)
?h2o.glm
library(h2o)
library(cvTools) # cvFolds()
library(Rcmdr)
data_all <- readXL("E:/amunka/AndaA/A_kad/Adatok_parolgas_Rbe.xlsx",
rownames=FALSE, header=TRUE, na="", sheet="2014", stringsAsFactors=FALSE)
data_all$prec = as.integer(data_all$P>0)
localH2O = h2o.init(nthreads=-1)  # nthreads=-1 gives all CPU for h2o
set.seed(1978)
cvf=cvFolds(nrow(data_all),K=6,type = "random")
data_all$fold=cvf$which[order(cvf$subsets[,1])]
# Dataframe átadása H2O-nak
df.hex = as.h2o(data_all[,2:ncol(data_all)],destination_frame = "df.hex")   # Remove Date variable for the sake of h2o
x.var=c("C","Ta", "Tmax","Tmin","RH","u")
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column="fold")
summary(evapo.glm)
data_all$loocv=1:nrow(data_all)
x.var=c("C","Ta", "Tmax","Tmin","RH","u")
fc="loocv"
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column=fc)
df.hex = as.h2o(data_all[,2:ncol(data_all)],destination_frame = "df.hex")   # Remove Date variable for the sake of h2o
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column=fc)
summary(evapo.glm)
fc="fold"
x_=c();alpha_=c();lambda_=c();r2_=c();rmse_=c();mae_=c();aic_=c()
x.vars = list(c("C","Ta", "Tmax","Tmin","RH","u","Rn","TaPs","Eo","ETo","year","P"),c("C","Ta", "Tmax","Tmin","RH","u","Rn","TaPs"),c("C","Ta", "Tmax","Tmin","RH","u"),c("Ta", "Tmax","Tmin","RH","u"),c("C"))
alphas = c(0,1,0.5)
for (x.var in x.vars) {
# Linear model without shrinkage (lambda=0)
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", lambda=0,fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,0)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
# RandomForest (lambda=-1)
evapo.glm = h2o.randomForest(y="Ps", x=x.var, training_frame = df.hex, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-1)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
# Boosting (lambda=-2)
evapo.glm = h2o.gbm(y="Ps", x=x.var, training_frame = df.hex, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-2)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
for (alpha in alphas) {
evapo.glm = h2o.glm(y="Ps", x=x.var, training_frame = df.hex, family="gaussian", alpha = alpha, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=","))
alpha_=c(alpha_,alpha)
lambda_ = c(lambda_,NA)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
}
}
eredm = data.frame(x=x_,lambda=lambda_,alpha=alpha_,r2=r2_,rmse=rmse_,mae=mae_,aic=aic_)
write.table(eredm,"clipboard",row.names = FALSE,sep = "\t",dec = ",")
fc="fold"
x_=c();alpha_=c();lambda_=c();r2_=c();rmse_=c();mae_=c();aic_=c()
x.vars = list(c("C","Ta", "Tmax","Tmin","RH","u","Rn","TaPs","Eo","ETo","year","P"),c("C","Ta", "Tmax","Tmin","RH","u","Rn","TaPs"),c("C","Ta", "Tmax","Tmin","RH","u"),c("Ta", "Tmax","Tmin","RH","u"),c("C"))
y.var="S"
alphas = c(0,1,0.5)
for (x.var in x.vars) {
# Linear model without shrinkage (lambda=0)
evapo.glm = h2o.glm(y=y.var, x=x.var, training_frame = df.hex, family="gaussian", lambda=0,fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,0)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
# RandomForest (lambda=-1)
evapo.glm = h2o.randomForest(y=y.var, x=x.var, training_frame = df.hex, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-1)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
# Boosting (lambda=-2)
evapo.glm = h2o.gbm(y=y.var, x=x.var, training_frame = df.hex, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=",")); alpha_=c(alpha_,NA); lambda_ = c(lambda_,-2)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,ifelse(is.null(evapo.glm@model$cross_validation_metrics@metrics$AIC),NA,evapo.glm@model$cross_validation_metrics@metrics$AIC))
for (alpha in alphas) {
evapo.glm = h2o.glm(y=y.var, x=x.var, training_frame = df.hex, family="gaussian", alpha = alpha, fold_column=fc)
x_ = c(x_,paste(x.var,collapse=","))
alpha_=c(alpha_,alpha)
lambda_ = c(lambda_,NA)
r2_ = c(r2_,evapo.glm@model$cross_validation_metrics@metrics$r2)
rmse_ = c(rmse_,evapo.glm@model$cross_validation_metrics@metrics$RMSE)
mae_ = c(mae_,evapo.glm@model$cross_validation_metrics@metrics$mae)
aic_ = c(aic_,evapo.glm@model$cross_validation_metrics@metrics$AIC)
}
}
eredm = data.frame(x=x_,lambda=lambda_,alpha=alpha_,r2=r2_,rmse=rmse_,mae=mae_,aic=aic_)
write.table(eredm,"clipboard",row.names = FALSE,sep = "\t",dec = ",")
plot(data_all$C,data_all$Ps,col=data_all$year-2013)
C_Ps_fit=lm(Ps~C,data = data_all)
abline(C_Ps_fit)
plot(data_all$C,data_all$Ps,col=data_all$prec+1)
abline(C_Ps_fit)
deltaE=data_all$Ps-data_all$C
which.max(abs(deltaE))
data_all[144,]
abline(0,1,col=3)
hist(deltaE)
library(Rcmdr)
data_all <- readXL("E:/amunka/AndaA/A_kad/Adatok_parolgas_Rbe.xlsx",
rownames=FALSE, header=TRUE, na="", sheet="2014", stringsAsFactors=FALSE)
save(data_all,file=""E:/amunka/AndaA/A_kad/all_data.RData")
save(data_all,file="E:/amunka/AndaA/A_kad/all_data.RData")
load("E:/amunka/AndaA/A_kad/all_data.RData")
data_all$prec = as.integer(data_all$P>0)
data_all$yearf = as.factor(data_all$year)
save(data_all,file="E:/amunka/AndaA/A_kad/all_data.RData")
lm2 = lm(Ps~C+C:yearf, data = data_all)
summary(lm2)
plot(lm2, ask=FALSE)
plot(lm2)
lm2 = lm(Ps~C*yearf, data = data_all)
summary(lm2)
lm2 = lm(Ps~C+C:yearf, data = data_all) # fix intercept, évente különböző meredekségek
summary(lm2)
library(tm)
?tdm
?DocumentTermMatrix
dictionary = c("spss","variancia","varianciaanalízis", "regresszió", "index", "statisztika",
"statisztikai","átlag","szórás")
library(multcomp)
fac = rep(c("korte","alma","kontroll"),10)
fac = rep(c("korte","alma","kontroll"),each = 10)
fac
tom = rnorm(10,1,30)
?rnorm
tom = rnorm(30,10,1)
diff= rep(1:3,each=10)
tom <- tom+diff
hist(tom)
hist(tom~fac)
boxplot(tom~fac)
df = data.frame(fac,tom)
str(df$fac)
levels(df$fac)
model = lm(tom~fac,data=df)
mc = glht(model,mcp(Location = "Dunnett"))
model = aov(tom~fac,data=df)
mc = glht(model,mcp(Location = "Dunnett"))
mc = glht(model,mcp(fac = "Dunnett"))
summary(mcs)
summary(mc)
fac = rep(c("korte","alma","kontroll"),each = 10)
tom = rnorm(30,10,1)
diff= rep(1:3,each=10)
tom <- tom+diff
boxplot(tom~fac)
diff
fac
df$fac
relevel(df$fac,ref="kontroll")
model = aov(tom~fac,data=df)
mc = glht(model,mcp(fac = "Dunnett"))
summary(mc)
df$fac
relevel(df$fac,ref="kontroll")
df$fac <- relevel(df$fac,ref="kontroll")
model = aov(tom~fac,data=df)
mc = glht(model,mcp(fac = "Dunnett"))
summary(mc)
library(tm)
library(wordcloud)
library(SnowballC) # for stemming
library(stringr)
?removePunctuation
library(tm)
library(wordcloud)
library(SnowballC) # for stemming
library(stringr)
dic2=c("keszthely","tanszék","konzulens","szója")
mintaszov=Corpus(VectorSource(c("a szója meg a szója az majdnem ket szója","a kis szója nem nagy szója keszthely sem")))
termFreq(mintaszov[[1]],control = list(dictionary=dic2))
termFreq("a szója meg a szója az majdnem ket szója és keszthely",control = list(dictionary=dic2))
termFreq("a szoja meg a szoja az majdnem ket szoja")
dtm=DocumentTermMatrix(mintaszov,list(dictionary=dic2))
as.matrix(dtm)
tdm=TermDocumentMatrix(mintaszov,list(dictionary=dic2))
as.matrix(tdm)
library(pdftools)
library(stringr)
jegyzetek=c()
path0="E:/amunka/QDA/collection of terms"
file_list = list.files(path = path_nev, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
for (pdffile in file_list) {
# read file
txt = pdf_text(pdffile)
# concatenate the pages into a single string
txt = paste(txt, collapse = " ")
# Sorvégjelek szóközzé alakítása
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
}
file_list = list.files(path = path0, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
for (pdffile in file_list) {
# read file
txt = pdf_text(pdffile)
# concatenate the pages into a single string
txt = paste(txt, collapse = " ")
# Sorvégjelek szóközzé alakítása
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
}
nchar(jegyzetek)
jegyzetek=tolower(jegyzetek)
jegyzetek = str_replace_all(jegyzetek,"[^a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]"," ")
nchar(jegyzetek)
substr(jegyzetek,1,2000)
jegyzetek = str_replace_all(jegyzetek,"(.)\\1{3,}"," ")
nchar(jegyzetek)
substr(jegyzetek,1,2000)
jegyzetek = str_replace_all(jegyzetek," {2,}"," ")
nchar(jegyzetek)
jegyzetek.stem=stemDocument(jegyzetek,language = "hungarian")
nchar(jegyzetek.stem)
substr(jegyzetek,60000,62000)
substr(jegyzetek.stem,60000,62000)
jegyzetkorpusz=VCorpus(VectorSource(jegyzetek),readerControl = list(language="HU"))
jegyzetkorpusz.stemmed=VCorpus(VectorSource(jegyzetek.stem),readerControl = list(language="HU"))
jegyzetdtm.stemmed = DocumentTermMatrix(jegyzetkorpusz.stemmed)
inspect(jegyzetdtm.stemmed)
jegyzetdtm = DocumentTermMatrix(jegyzetkorpusz)
inspect(jegyzetdtm)
#Leggyakoribb szavak kiiratása
freq=colSums(as.matrix(jegyzetdtm)) #Az oszlopösszegek nevei a kifejezések
freq.stemmed=colSums(as.matrix(jegyzetdtm.stemmed))
ord = order(freq,decreasing = T)
freq[ord[1:200]]
oed.stemmed = order(freq.stemmed,decreasing = T)
ord.stemmed = order(freq.stemmed,decreasing = T)
#freq.stemmed[ord.stemmed[1:200]]
freq.stemmed[ord.stemmed[1:200]]
write.table(names(freq[ord]),"clipboard",row.names = FALSE,sep = "\t",dec = ",")
write.table(freq[ord],"clipboard",row.names = FALSE,sep = "\t",dec = ",")
write.table(names(freq[ord]),"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
write.table(names(freq.stemmed[ord.stemmed]),"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
write.table(freq.stemmed[ord.stemmed],"clipboard",row.names = FALSE,sep = "\t",dec = ",")
jegyzetek.stemstem=stemDocument(jegyzetek.stem,language = "hungarian")
szavak=colnames(as.matrix(jegyzetdtm))
szavak.s1=stemDocument(szavak,language = "hungarian")
szavak.s2=stemDocument(szavak.s1,language = "hungarian")
szavak.s3=stemDocument(szavak.s2,language = "hungarian")
write.table(szavak,"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
write.table(szavak.s1,"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
write.table(szavak.s2,"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
write.table(szavak.s3,"clipboard-128",row.names = FALSE,sep = "\t",dec = ",")
library(pdftools)
library(stringr)
library(tm)
jegyzetek=c()
path0="E:/amunka/QDA/collection of terms"
file_list = list.files(path = path0, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
for (pdffile in file_list) {
# read file
txt = pdf_text(pdffile)
# concatenate the pages into a single string
txt = paste(txt, collapse = " ")
# Sorvégjelek szóközzé alakítása
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
}
# Kisbetűs
jegyzetek=tolower(jegyzetek)
# Csak a magyar ABC betűi maradjanak
jegyzetek = str_replace_all(jegyzetek,"[^a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]"," ")
# Legalább 4 hosszú, azonos karakterből álló substringet lecseréli egy szóközre
jegyzetek = str_replace_all(jegyzetek,"(.)\\1{3,}"," ")
# Fölösleges whitespace eltávolítása
jegyzetek = str_replace_all(jegyzetek," {2,}"," ")
jegyzetek=c()
path0="E:/amunka/QDA/collection of terms"
file_list = list.files(path = path0, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
for (pdffile in file_list) {
# read file
txt = pdf_text(pdffile)
# concatenate the pages into a single string
txt = paste(txt, collapse = " ")
# Sorvégjelek szóközzé alakítása
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
}
# Kisbetűs
jegyzetek=tolower(jegyzetek)
# Csak a magyar ABC betűi maradjanak
jegyzetek = str_replace_all(jegyzetek,"[^a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]"," ")
# Legalább 4 hosszú, azonos karakterből álló substringet lecseréli egy szóközre
jegyzetek = str_replace_all(jegyzetek,"(.)\\1{3,}"," ")
# Fölösleges whitespace eltávolítása
jegyzetek = str_replace_all(jegyzetek," {2,}"," ")
jegyzetek=c()
path0="E:/amunka/QDA/collection of terms"
file_list = list.files(path = path0, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
pdffile=file_list
txt = pdf_text(pdffile)
substr(txt,30000,32000)
substr(txt,3000,3200)
txt = paste(txt, collapse = " ")
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
substr(txt,3000,3200)
substr(txt,30000,32000)
substr(jegyzetek,30000,32000)
jegyzetek=tolower(jegyzetek)
substr(jegyzetek,1,2000)
?tolower
?pdf_text
pdf_info(pdffile)
pdf_fonts(pdffile)
jegyzetek = str_replace_all(jegyzetek,"[^a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]"," ")
jegyzetek = str_replace_all(jegyzetek,"(.)\\1{3,}"," ")
jegyzetek = str_replace_all(jegyzetek," {2,}"," ")
substr(jegyzetek,1,2000)
jegyzetek=str_to_lower(jegyzetek)
substr(jegyzetek,1,2000)
nchar(jegyzetek)
jegyzetek.stem=stemDocument(jegyzetek,language = "hungarian")
nchar(jegyzetek.stem)
jegyzetek.stemstem=stemDocument(jegyzetek.stem,language = "hungarian")
nchar(jegyzetek.stemstem)
jegyzetkorpusz=VCorpus(VectorSource(jegyzetek),readerControl = list(language="HU"))
jegyzetkorpusz.stemmed=VCorpus(VectorSource(jegyzetek.stem),readerControl = list(language="HU"))
jegyzetkorpusz.stemmedstemmed=VCorpus(VectorSource(jegyzetek.stemstem),readerControl = list(language="HU"))
jegyzetdtm = DocumentTermMatrix(jegyzetkorpusz)
jegyzetdtm.stemmed = DocumentTermMatrix(jegyzetkorpusz.stemmed)
jegyzetdtm.stemmedstemmed = DocumentTermMatrix(jegyzetkorpusz.stemmedstemmed)
inspect(jegyzetdtm)
inspect(jegyzetdtm.stemmed)
inspect(jegyzetdtm.stemmedstemmed)
freq=colSums(as.matrix(jegyzetdtm)) #Az oszlopösszegek nevei a kifejezések
freq.stemmed=colSums(as.matrix(jegyzetdtm.stemmed))
ord = order(freq,decreasing = T)
ord.stemmed = order(freq.stemmed,decreasing = T)
dbszo=50 # hány szóból
wordcloud(words=names(freq.stemmed[ord.stemmed[1:dbszo]]),freq=freq.stemmed[ord.stemmed[1:dbszo]])
library(wordcloud)
wordcloud(words=names(freq.stemmed[ord.stemmed[1:dbszo]]),freq=freq.stemmed[ord.stemmed[1:dbszo]])
dbszo=80 # hány szóból
wordcloud(words=names(freq.stemmed[ord.stemmed[1:dbszo]]),freq=freq.stemmed[ord.stemmed[1:dbszo]])
freq.stemmedstemmed=colSums(as.matrix(jegyzetdtm.stemmedstemmed))
wordcloud(words=names(freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]]),freq=freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]])
ord.stemmedstemmed = order(freq.stemmedstemmed,decreasing = T)
wordcloud(words=names(freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]]),freq=freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]])
jegyzetek=c()
path0="E:/amunka/QDA/collection of terms"
file_list = list.files(path = path0, pattern = "*.pdf", full.names = TRUE, recursive = FALSE, ignore.case = TRUE) # recursive = T, mert van ahol almappában van
for (pdffile in file_list) {
# read file
txt = pdf_text(pdffile)
# concatenate the pages into a single string
txt = paste(txt, collapse = " ")
# Sorvégjelek szóközzé alakítása
txt = gsub("\r\n", " ", txt)
jegyzetek=c(jegyzetek,txt)
}
# Kisbetűs
# jegyzetek=tolower(jegyzetek) # Error with encoding
jegyzetek=str_to_lower(jegyzetek)
# Csak a magyar ABC betűi maradjanak
jegyzetek = str_replace_all(jegyzetek,"[^a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]"," ")
# Legalább 4 hosszú, azonos karakterből álló substringet lecseréli egy szóközre
jegyzetek = str_replace_all(jegyzetek,"(.)\\1{3,}"," ")
# Fölösleges whitespace eltávolítása
jegyzetek = str_replace_all(jegyzetek," {2,}"," ")
jegyzetek.stem=stemDocument(jegyzetek,language = "hungarian")
jegyzetek.stemstem=stemDocument(jegyzetek.stem,language = "hungarian")
jegyzetkorpusz=VCorpus(VectorSource(jegyzetek),readerControl = list(language="HU"))
jegyzetkorpusz.stemmed=VCorpus(VectorSource(jegyzetek.stem),readerControl = list(language="HU"))
jegyzetkorpusz.stemmedstemmed=VCorpus(VectorSource(jegyzetek.stemstem),readerControl = list(language="HU"))
jegyzetdtm = DocumentTermMatrix(jegyzetkorpusz)
jegyzetdtm.stemmed = DocumentTermMatrix(jegyzetkorpusz.stemmed)
jegyzetdtm.stemmedstemmed = DocumentTermMatrix(jegyzetkorpusz.stemmedstemmed)
inspect(jegyzetdtm)
inspect(jegyzetdtm.stemmed)
inspect(jegyzetdtm.stemmedstemmed)
freq=colSums(as.matrix(jegyzetdtm)) #Az oszlopösszegek nevei a kifejezések
freq.stemmed=colSums(as.matrix(jegyzetdtm.stemmed))
freq.stemmedstemmed=colSums(as.matrix(jegyzetdtm.stemmedstemmed))
ord = order(freq,decreasing = T)
ord.stemmed = order(freq.stemmed,decreasing = T)
ord.stemmedstemmed = order(freq.stemmedstemmed,decreasing = T)
freq.stemmed[ord.stemmed[1:200]]
wordcloud(words=names(freq.stemmed[ord.stemmed[1:dbszo]]),freq=freq.stemmed[ord.stemmed[1:dbszo]])
wordcloud(words=names(freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]]),freq=freq.stemmedstemmed[ord.stemmedstemmed[1:dbszo]])
p <- ggplot(kr,aes(x=pata2,y=rugalmassag,shape=eh,color=szin))
p+geom_point()+labs(x="Ló sorszáma",y="Rugalmasság")+scale_color_manual("Pataszín",values=c("yellow","grey"))+scale_shape_manual("Első/hátsó láb",values = c(16,17))
library(ggplot2)
load("kr.RData")
kr$pata2 <- kr$pata+ifelse(kr$eh=="h",0.1,0)
p <- ggplot(kr,aes(x=pata2,y=rugalmassag,shape=eh,color=szin))
p+geom_point()+labs(x="Ló sorszáma",y="Rugalmasság")+scale_color_manual("Pataszín",values=c("yellow","grey"))+scale_shape_manual("Első/hátsó láb",values = c(16,17))
library(ggplot2)
setwd("E:/amunka/BartosA")
load("kr.RData")
kr$pata2 <- kr$pata+ifelse(kr$eh=="h",0.1,0)
p <- ggplot(kr,aes(x=pata2,y=rugalmassag,shape=eh,color=szin))
p+geom_point()+labs(x="Ló sorszáma",y="Rugalmasság")+scale_color_manual("Pataszín",values=c("yellow","grey"))+scale_shape_manual("Első/hátsó láb",values = c(16,17))
kr$kemenyseg <- as.double(kr$kemenyseg)
kr$pata2 <- kr$pata+ifelse(kr$eh=="h",0.1,0)
p <- ggplot(kr,aes(x=pata2,y=kemenyseg,shape=eh,color=szin))
p+geom_point()+labs(x="Ló sorszáma",y="Keménység")+scale_color_manual("Pataszín",values=c("yellow","grey"))+scale_shape_manual("Első/hátsó láb",values = c(16,17))
install.packages("installr")
library(installr)
